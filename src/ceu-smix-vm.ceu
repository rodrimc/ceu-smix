#include "media/media.ceu"

#define MEDIATAB       1
#define COND_INDEX     1
#define COND_CODE      1
#define COND_OPERAND   2 
#define ACT_PREDICATE  1
#define ACT_CODE       2
#define ACT_OPERAND    3
#define ACT_PROP       4
#define ACT_VALUE      5
#define ACT_TYPE       6

#define START    "start"
#define STOP     "stop"
#define PAUSE    "pause"
#define SEEK     "seek"
#define SET      "set"
#define NORMAL   "normal"
#define PINNED   "pinned"
#define ASYNC    "async"

#define ptr(arg) &&arg[0]
#define equal(arg1, arg2) _strcmp (arg1, arg2) == 0
#define equalptr(arg1, arg2) _strcmp (ptr(arg1), ptr(arg2)) == 0

native/pre do
##ifdef DEBUG
 ##undef DEBUG
 ##define DEBUG 1
##else
 ##define DEBUG 0
##endif

#define debug(fmt, ...) \
  do { if (DEBUG) fprintf(stderr, "%s:%d: " fmt, __FILE__, \
      __LINE__, __VA_ARGS__); } while (0)
end

native/nohold
  _debug,
;

event (void) smix_event;
vector [] byte event_condition = _;
vector [] byte event_source = _;

event (void) smix_action;
vector [] byte action_code    = _;
vector [] byte action_operand = _;
vector [] byte action_prop = _;
vector [] byte action_value = _;
vector [] byte action_type = _;

code/await
Smix_Media_Controller (var& IScene scene) -> void
do
  /* properties */
  vector[] byte operand = [] .. outer.action_operand;
  vector[] byte src = [] .. [[ SMIX[MEDIATAB][@operand].src or '' ]];
  var Region region = val Region (0, 0, 0, 0, 1);
  region.x      = [[ SMIX[MEDIATAB][@operand].x or 0 ]];
  region.y      = [[ SMIX[MEDIATAB][@operand].y or 0 ]];
  region.width  = [[ SMIX[MEDIATAB][@operand].width or 0 ]];
  region.height = [[ SMIX[MEDIATAB][@operand].height or 0 ]];
  region.z      = [[ SMIX[MEDIATAB][@operand].z or 1 ]];

  var Media.Default media = val Media.Default ([] .. src, region);
  /*TODO: set other properties */

  _debug ("Smix_Media_Controller (%s)\n", ptr(operand));
  do
    var& IPlayer player;
    event (void) stop;
    watching Play (&scene, &media) -> (&player), stop
    do
      /* should we await the CM_PLAYER_START event? */
      outer.event_condition = [] .. START;
      outer.event_source    = [] .. operand;
      emit outer.smix_event;

      par do
        var uint id = await CM_PLAYER_START until (id == player.self);
        _debug ("%s has started\n", ptr(operand));
      with
        every outer.smix_action do
          if equal (ptr(outer.action_code), STOP) and
             equalptr (outer.action_operand, operand) then
             emit stop;
          end
        end
      end
    end
  end

  outer.event_condition = [] .. STOP;
  outer.event_source    = [] .. operand;
  emit outer.smix_event;
end

pool [] Smix_Media_Controller media_pool;

code/await
Smix_Link (var& IScene scene, var int index) -> FOREVER
do
  vector[] byte cond_code    = []..[[SMIX[@index][COND_INDEX][COND_CODE] ]];
  vector[] byte cond_operand = []..[[SMIX[@index][COND_INDEX][COND_OPERAND] ]];

  _debug ("link (%d): cond (%s) source (%s)\n", index,
              ptr(cond_code), ptr(cond_operand));

  vector [] byte actcode    = _;
  every outer.smix_event do
    if equalptr (outer.event_condition, cond_code) and
       equalptr (outer.event_source, cond_operand) then

      _debug ("link triggered: cond (%s) source (%s)\n",
                ptr(cond_code), ptr(cond_operand));

      var int actions = [[ #SMIX[@index] - 1 ]];
      var int i;
      loop i in [2 -> actions + 1] do
        [[
           predicate = SMIX[@index][@i][ACT_PREDICATE]
           if (type (predicate) == 'function' ) then
             predicate = predicate ()
           end
        ]]

        var bool predicate = [[ predicate ]];

        if predicate then

          actcode              = [] .. [[ SMIX[@index][@i][ACT_CODE] ]];
          outer.action_operand = [] .. [[ SMIX[@index][@i][ACT_OPERAND] ]];
          outer.action_prop    = [] .. [[ SMIX[@index][@i][ACT_PROP] or "" ]];
          outer.action_value   = [] .. [[ SMIX[@index][@i][ACT_VALUE] or "" ]];
          outer.action_type    = [] .. [[ SMIX[@index][@i][ACT_TYPE]
                                                              or "normal" ]];

          if equal (ptr(actcode), START) then
            spawn Smix_Media_Controller (&scene) in outer.media_pool;
          else/if equal (ptr(actcode), STOP) then
            outer.action_code = [] .. STOP;
            emit outer.smix_action;
          end
        end
      end
    end
  end
end

pool [] Smix_Link links_pool;

/* load SMIX file */
vector [] byte file = [] .. "examples/example2.lua";
[[
  SMIX = dofile (@file)

  if SMIX[@MEDIATAB].lambda == nil then
    SMIX[@MEDIATAB].lambda = {width = 640, height = 480}
  end
]]

var int width   = [[ SMIX[MEDIATAB].lambda.width ]];
var int height  = [[ SMIX[MEDIATAB].lambda.height ]];

var& IScene scene;
watching Scene (Size(width, height)) -> (&scene) do
  /* spawn links */
  var int links = [[ #SMIX - 1 ]];
  var int i;
  loop i in [1 -> links] do
    spawn Smix_Link (&scene, i + 1) in links_pool;
  end

  /* start application */
  event_condition = [] .. START;
  event_source    = [] .. "lambda";
  emit smix_event;

  await FOREVER;
end

escape 0;

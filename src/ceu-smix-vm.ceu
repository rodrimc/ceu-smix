#include "media/media.ceu"

#define MEDIA    1
#define START    "start"
#define STOP     "stop"
#define PAUSE    "pause"
#define SEEK     "seek"
#define SET      "set"

#define equal(arg1, arg2) _strcmp (arg1, arg2) == 0

native/pre do
##ifdef DEBUG
 ##undef DEBUG
 ##define DEBUG 1
##else
 ##define DEBUG 0
##endif

#define debug(fmt, ...) \
  do { if (DEBUG) fprintf(stderr, "%s:%d: " fmt, __FILE__, \
      __LINE__, __VA_ARGS__); } while (0)
end

native/nohold
  _debug,
;

event (void) smix_event;
vector [] byte event_condition = _;
vector [] byte event_source = _;

event (void) smix_action;
vector [] byte action_code    = _;
vector [] byte action_operand = _;

code/await
Smix_Media_Controller (var& IScene scene, vector&[] byte mediaid) -> void
do
  /* properties */
  vector[] byte operand = [] .. mediaid;
  vector[] byte src = [] .. [[ SMIX[@MEDIA][@operand].src or '' ]];
  var Region region = val Region (0, 0, 0, 0, 1);
  region.x      = [[ SMIX[@MEDIA][@operand].x or 0 ]];
  region.y      = [[ SMIX[@MEDIA][@operand].y or 0 ]];
  region.width  = [[ SMIX[@MEDIA][@operand].width or 0 ]];
  region.height = [[ SMIX[@MEDIA][@operand].height or 0 ]];
  region.z      = [[ SMIX[@MEDIA][@operand].z or 1 ]];

  var Media.Default media = val Media.Default ([] .. src, region);
  /*TODO: set other properties */

  _debug ("Smix_Media_Controller (%s)\n", &&operand[0]);
  do
    var& IPlayer player;
    event (void) stop;
    watching Play (&scene, &media) -> (&player), stop
    do
      /* should we await the CM_PLAYER_START event? */
      outer.event_condition = [] .. START;
      outer.event_source    = [] .. operand;
      emit outer.smix_event;

      par do
        var uint id = await CM_PLAYER_START until (id == player.self);
        _debug ("%s has started\n", &&operand[0]);
      with
        every outer.smix_action do
          if equal (&&outer.action_code[0], STOP) and
             equal (&&outer.action_operand[0], &&operand[0]) then
             emit stop;
          end
        end
      end
    end
  end

  outer.event_condition = [] .. STOP;
  outer.event_source    = [] .. operand;
  emit outer.smix_event;
end

pool [] Smix_Media_Controller media_pool;

code/await
Smix_Link (var& IScene scene, var int index) -> FOREVER
do
  vector [] byte condition = [] .. [[ SMIX[@index][1][1] ]];
  vector [] byte source    = [] .. [[ SMIX[@index][1][2] ]];

  vector [] byte action    = _;
  vector [] byte target    = _;

  _debug ("link (%d): cond (%s) source (%s)\n", index,
              &&condition[0], &&source[0]);

  every outer.smix_event do
    if equal (&&outer.event_condition[0], &&condition[0]) and
       equal (&&outer.event_source[0], &&source[0]) then

      _debug ("link triggered: cond (%s) source (%s)\n",
                &&condition[0], &&source[0]);

      var int actions = [[ #SMIX[@index] - 1 ]];
      var int i;
      loop i in [1 -> actions ] do
        [[
           predicate = SMIX[@index][2][1]
           if (type (predicate) == 'function' ) then
             predicate = predicate ()
           end
        ]]

        var bool predicate = [[ predicate ]];

        if predicate then
          action = [] .. [[ SMIX[@index][@i + 1][2] ]];
          target = [] .. [[ SMIX[@index][@i + 1][3] ]];

          if equal (&&action[0], START) then
            spawn Smix_Media_Controller (&scene, &target) in outer.media_pool;
          else/if equal (&&action[0], STOP) then
            outer.action_code = [] .. STOP;
            outer.action_operand = [] .. target;
            emit outer.smix_action;
          end
        end
      end
    end
  end
end

pool [] Smix_Link links_pool;

/* load SMIX file */
vector [] byte file = [] .. "examples/example1.lua";
[[
  SMIX = dofile (@file)

  if SMIX[@MEDIA].lambda == nil then
    SMIX[@MEDIA].lambda = {width = 640, height = 480}
  end
]]

var int width   = [[ SMIX[MEDIA].lambda.width ]];
var int height  = [[ SMIX[MEDIA].lambda.height ]];

var& IScene scene;
watching Scene (Size(width, height)) -> (&scene) do
  /* spawn links */
  var int links = [[ #SMIX - 1 ]];
  var int i;
  loop i in [1 -> links] do
    spawn Smix_Link (&scene, i + 1) in links_pool;
  end

  /* start application */
  event_condition = [] .. START;
  event_source    = [] .. "lambda";
  emit smix_event;

  await FOREVER;
end

escape 0;
